name: release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: "angelcv"
  OWNER: "AngelProtection"

jobs:
  # TODO [LOW]: Add unit tests
  # unit-test:
  #   uses: AngelProtection/angelcv/.github/workflows/test.yaml@main

  details:
    runs-on: ubuntu-latest
    # needs: unit-test
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Check Ref Type
        if: github.ref_type != 'tag'
        run: echo "This is not a tag; exiting"; exit 1

      - name: Extract tag and Details
        id: release
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
          SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"

      - name: Debug Outputs
        if: env.RUNNER_DEBUG
        run: |
          echo "Version is $NEW_VERSION"
          echo "Suffix is $SUFFIX"
          echo "Tag name is $TAG_NAME"

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | grep -oP '"releases":\{"\K[^"]+' | sort -rV | head -n 1)
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  setup_and_build:
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract Python version from pyproject.toml
        id: python-version
        run: |
          # Extract the requires-python field from pyproject.toml
          PYTHON_RANGE=$(grep -E "requires-python\s*=" pyproject.toml | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Python range: $PYTHON_RANGE"
          
          # Extract the upper bound (e.g., "3.13" from ">=3.9,<3.13")
          UPPER_BOUND=$(echo $PYTHON_RANGE | grep -oE '<[0-9]+\.[0-9]+' | sed 's/<//g')
          
          # If no upper bound, use latest stable Python
          if [ -z "$UPPER_BOUND" ]; then
            PYTHON_VERSION="3.12"
          else
            # Use the version just below the upper bound
            MAJOR=$(echo $UPPER_BOUND | cut -d. -f1)
            MINOR=$(echo $UPPER_BOUND | cut -d. -f2)
            MINOR=$((MINOR - 1))
            PYTHON_VERSION="$MAJOR.$MINOR"
          fi
          
          echo "Selected Python version: $PYTHON_VERSION"
          echo "python-version=$PYTHON_VERSION" >> "$GITHUB_OUTPUT"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.python-version.outputs.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Bump version
        run: |
          NEW_VERSION="${{ needs.details.outputs.new_version }}"
          uv version "$NEW_VERSION"

      - name: Install dependencies
        run: uv sync

      - name: Build source and wheel distribution
        run: uv build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Upload release to PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Publish to PyPI
        run: uv publish

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    env:
      TAG_NAME: ${{ needs.details.outputs.tag_name }}
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to avoid issues with tags and branches

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        id: create_release
        run: gh release create ${{ env.TAG_NAME }} dist/* --title ${{ env.TAG_NAME }} --generate-notes
        env:
          GH_TOKEN: ${{ github.token }}

  # bump_version:
  #   needs: [details, github_release, pypi_publish]
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #     pull-requests: write
  #   env:
  #     NEW_VERSION: ${{ needs.details.outputs.new_version }}
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0 # Fetch full history to avoid issues with tags and branches

  #     - name: Bump version
  #       run: |
  #         NEW_VERSION=${{ env.NEW_VERSION }}
  #         uv version "$NEW_VERSION"

  #     - uses: stefanzweifel/git-auto-commit-action@v5
  #       with:
  #         commit_message: Bumping version to ${{ env.NEW_VERSION }}
  #         branch: bump-version-${{ env.NEW_VERSION }}
  #         file_pattern: "pyproject.toml"
  #         skip_dirty_check: true
  #         create_branch: true